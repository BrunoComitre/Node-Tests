"use strict";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var Jimp = require("jimp");

var ss = require("seededshuffle");

var path = require("path");

function encryptImage(_x, _x2) {
  return _encryptImage.apply(this, arguments);
}

function _encryptImage() {
  _encryptImage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(file, key) {
    var imgArr, w, h, image, x, row, y, colr, colorRgba, a, hidden, _x5, _y, rgba, colorArr, clr, fileInfo, newName;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            imgArr = [];
            _context.next = 3;
            return Jimp.read(file);

          case 3:
            image = _context.sent;
            w = image.bitmap.width; //  width of the image

            h = image.bitmap.height;

            for (x = 0; x < w; x++) {
              row = [];

              for (y = 0; y < h; y++) {
                colr = image.getPixelColor(x, y);
                colorRgba = Jimp.intToRGBA(colr);
                row.push(colorRgba);
              }

              imgArr.push(row);
            }

            ss.shuffle(imgArr, key);

            for (a = 0; a < imgArr.length; a++) {
              ss.shuffle(imgArr[a], key);
            }

            hidden = new Jimp(w, h);

            for (_x5 = 0; _x5 < w; _x5++) {
              for (_y = 0; _y < h; _y++) {
                rgba = imgArr[_x5][_y];
                colorArr = [rgba.r, rgba.g, rgba.b];
                ss.shuffle(colorArr, key);
                clr = Jimp.rgbaToInt(colorArr[0], colorArr[1], colorArr[2], rgba.a);
                hidden.setPixelColor(clr, _x5, _y);
              }
            }

            fileInfo = path.parse(file);
            newName = fileInfo.name + "_enc" + fileInfo.ext;
            hidden.write("." + fileInfo.dir + "/" + newName);

          case 14:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _encryptImage.apply(this, arguments);
}

function decryptImage(_x3, _x4) {
  return _decryptImage.apply(this, arguments);
}

function _decryptImage() {
  _decryptImage = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(file, key) {
    var target,
        imgArr,
        w,
        h,
        image,
        x,
        row,
        y,
        colr,
        a,
        reveal,
        _x6,
        _y2,
        rgba,
        colorArr,
        clr,
        fileInfo,
        newName,
        _args2 = arguments;

    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            target = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : null;
            imgArr = [];
            _context2.next = 4;
            return Jimp.read(file);

          case 4:
            image = _context2.sent;
            w = image.bitmap.width; //  width of the image

            h = image.bitmap.height;

            for (x = 0; x < w; x++) {
              row = [];

              for (y = 0; y < h; y++) {
                colr = image.getPixelColor(x, y);
                row.push(Jimp.intToRGBA(colr));
              }

              imgArr.push(row);
            }

            for (a = 0; a < imgArr.length; a++) {
              ss.unshuffle(imgArr[a], key);
            }

            ss.unshuffle(imgArr, key);
            reveal = new Jimp(w, h);

            for (_x6 = 0; _x6 < w; _x6++) {
              for (_y2 = 0; _y2 < h; _y2++) {
                rgba = imgArr[_x6][_y2];
                colorArr = [rgba.r, rgba.g, rgba.b];
                ss.unshuffle(colorArr, key);
                clr = Jimp.rgbaToInt(colorArr[0], colorArr[1], colorArr[2], rgba.a);
                reveal.setPixelColor(clr, _x6, _y2);
              }
            }

            if (target == null) {
              fileInfo = path.parse(file);
              newName = fileInfo.name + "_dec" + fileInfo.ext;
              target = "." + fileInfo.dir + "/" + newName;
            }

            reveal.write(target);

          case 14:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _decryptImage.apply(this, arguments);
}

module.exports = {
  encryptImage: encryptImage,
  decryptImage: decryptImage
};